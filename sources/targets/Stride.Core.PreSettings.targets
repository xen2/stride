<!-- Build file pre-included by all Stride projects -->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" TreatAsLocalProperty="RuntimeIdentifier">
  <!-- Setup this part according to your project if you want your .csproj to compile individually without going through the .sln file -->
  <PropertyGroup>
    <SolutionDir Condition=" '$(SolutionDir)' == '' ">$(MSBuildThisFileDirectory)..\..\build\</SolutionDir>
    <SolutionName Condition=" '$(SolutionName)' == '' ">Stride</SolutionName>
    <SolutionPath Condition=" '$(SolutionPath)' == '' ">$(SolutionDir)$(SolutionName).sln</SolutionPath>
  </PropertyGroup>

  <!--Import Local Pre Settings for the solution being loaded -->
  <Import Project="$(SolutionDir)$(SolutionName).PreSettings.Local.targets" Condition="Exists('$(SolutionDir)$(SolutionName).PreSettings.Local.targets')" />
  <Import Project="$(SolutionDir)Stride.Core.PreSettings.Local.targets" Condition="Exists('$(SolutionDir)Stride.Core.PreSettings.Local.targets')" />
  
    <!-- 
    Settings StridePlatform specific
  -->
  <PropertyGroup>
    <!-- Using C# version 7.3 -->
    <LangVersion>7.3</LangVersion>
    <StrideRuntimeTargetFramework>net461</StrideRuntimeTargetFramework>
    <StrideEditorTargetFramework>netcoreapp3.1</StrideEditorTargetFramework>
    <StrideEditorTargetFrameworks>netcoreapp3.1</StrideEditorTargetFrameworks>
    <StridePlatformDefines>STRIDE_PLATFORM_WINDOWS;STRIDE_PLATFORM_WINDOWS_DESKTOP;NET45</StridePlatformDefines>

    <!-- Note: ideally we would split using ItemGroup but then PropertyGroup are not properly evaluated if they contain ItemGroup (unless using Targets) -->
    <StridePlatforms Condition="'$(StridePlatforms)' == ''">Windows</StridePlatforms>
    <!-- Let's support escaped MSBuild variables, in case it was sent from Stride.build (not sure why but I couldn't make it work properly when passing to MSBuild.Properties) -->
    <StridePlatforms>$([MSBuild]::Unescape('$(StridePlatforms)'))</StridePlatforms>
    <_StridePlatforms>;$(StridePlatforms);</_StridePlatforms>
  </PropertyGroup>
  
  <PropertyGroup Condition="$(TargetFramework.StartsWith('uap10.0'))">
    <!-- Reset runtime identifier by default (otherwise GetPackagingOutputs fail) -->
    <RuntimeIdentifier></RuntimeIdentifier>
    <RuntimeIdentifiers></RuntimeIdentifiers>
    <WindowsAppContainer>false</WindowsAppContainer>
    <AppxPackage>false</AppxPackage>
    <Platform>AnyCPU</Platform>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(StrideRuntime)' == 'true' And '$(StrideRuntimeNetStandard)' != 'true' ">
    <!-- Add netstandard2.0 no matter what (needed for references) -->
    <StrideRuntimeTargetFrameworks>netstandard2.0</StrideRuntimeTargetFrameworks>
    <StrideRuntimeTargetFrameworks Condition="$(_StridePlatforms.Contains(';Windows;')) And '$(StrideRuntimeWindowsDotNet)' == 'true'">$(StrideRuntimeTargetFrameworks);net461</StrideRuntimeTargetFrameworks>
    <StrideRuntimeTargetFrameworks Condition="$(_StridePlatforms.Contains(';Windows;')) And '$(StrideRuntimeWindowsNetCoreApp3)' == 'true'">$(StrideRuntimeTargetFrameworks);netcoreapp3.0</StrideRuntimeTargetFrameworks>
    <StrideRuntimeTargetFrameworks Condition="$(_StridePlatforms.Contains(';UWP;'))">$(StrideRuntimeTargetFrameworks);uap10.0.16299</StrideRuntimeTargetFrameworks>
    <StrideRuntimeTargetFrameworks Condition="$(_StridePlatforms.Contains(';Android;'))">$(StrideRuntimeTargetFrameworks);monoandroid81</StrideRuntimeTargetFrameworks>
    <StrideRuntimeTargetFrameworks Condition="$(_StridePlatforms.Contains(';iOS;'))">$(StrideRuntimeTargetFrameworks);xamarinios10</StrideRuntimeTargetFrameworks>

    <StrideRuntimeIdentifiers Condition="'$(StrideRuntimeNetStandardNoRuntimeIdentifiers)' != 'true' And '$(TargetFramework)' == 'netstandard2.0' And $(_StridePlatforms.Contains(';Windows;'))">$(StrideRuntimeIdentifiers);win</StrideRuntimeIdentifiers>
    <StrideRuntimeIdentifiers Condition="'$(StrideRuntimeNetStandardNoRuntimeIdentifiers)' != 'true' And '$(TargetFramework)' == 'netstandard2.0' And $(_StridePlatforms.Contains(';Linux;'))">$(StrideRuntimeIdentifiers);linux</StrideRuntimeIdentifiers>
    <StrideRuntimeIdentifiers Condition="'$(StrideRuntimeNetStandardNoRuntimeIdentifiers)' != 'true' And '$(TargetFramework)' == 'netstandard2.0' And $(_StridePlatforms.Contains(';macOS;'))">$(StrideRuntimeIdentifiers);osx</StrideRuntimeIdentifiers>
    <!-- Default: at least win (used when compiling only a single platform such as UWP for netstandard assemblies) -->
    <StrideRuntimeIdentifiers Condition="'$(StrideRuntimeNetStandardNoRuntimeIdentifiers)' != 'true' And '$(TargetFramework)' == 'netstandard2.0' And '$(StrideRuntimeIdentifiers)' == ''">win</StrideRuntimeIdentifiers>

    <!-- Need to use "win" runtime identifier for all other platforms as a workaround https://github.com/NuGet/Home/issues/7661#issuecomment-450040204 -->
    <StrideRuntimeIdentifiers Condition="'$(StrideRuntimeNetStandardNoRuntimeIdentifiers)' != 'true' And '$(TargetFramework)' != 'netstandard2.0'">any</StrideRuntimeIdentifiers>
    
    <StrideRuntimeIdentifiers Condition="'$(StrideRuntimeIdentifiers)' != ''">;$(StrideRuntimeIdentifiers);</StrideRuntimeIdentifiers>

    <!-- Make sure RuntimeIdentifier is part of the list -->
    <StrideRuntimeIdentifier Condition="'$(StrideRuntimeIdentifiers)' != '' And $(StrideRuntimeIdentifiers.Contains(';$(RuntimeIdentifier);'))">$(RuntimeIdentifier)</StrideRuntimeIdentifier>
    <!-- Otherwise compute fallback -->
    <StrideRuntimeIdentifier Condition="'$(StrideRuntimeIdentifiers)' != '' And '$(StrideRuntimeIdentifier)' == ''">$(StrideRuntimeIdentifiers.Split(';', StringSplitOptions.RemoveEmptyEntries)[0])</StrideRuntimeIdentifier>

    <StrideRuntimeTargetFrameworks>$([MSBuild]::Unescape($(StrideRuntimeTargetFrameworks.Trim(';'))))</StrideRuntimeTargetFrameworks>
    <StrideRuntimeIdentifiers>$([MSBuild]::Unescape($(StrideRuntimeIdentifiers.Trim(';'))))</StrideRuntimeIdentifiers>

    <TargetFrameworks>$(StrideRuntimeTargetFrameworks)</TargetFrameworks>
    <RuntimeIdentifiers Condition="'$(StrideRuntimeIdentifiers)' != ''">$(StrideRuntimeIdentifiers)</RuntimeIdentifiers>
	
    <ExtrasBuildEachRuntimeIdentifier Condition="'$(RuntimeIdentifiers)' != ''">true</ExtrasBuildEachRuntimeIdentifier>

    <!-- UpToDate check doesn't work with multi-TFM projects! https://github.com/dotnet/project-system/issues/2487 -->
    <!--<DisableFastUpToDateCheck Condition="$(TargetFrameworks.Contains(';')) Or $(RuntimeIdentifiers.Contains(';'))">true</DisableFastUpToDateCheck>-->
    <!--<TargetFrameworks>net461;uap10.0.16299;monoandroid81;xamarinios10;netstandard2.0</TargetFrameworks>-->
  </PropertyGroup>

  <PropertyGroup Condition=" '$(StrideRuntime)' == 'true' And '$(StrideRuntimeNetStandard)' == 'true' ">
    <TargetFramework>netstandard2.0</TargetFramework>
  </PropertyGroup>

  <PropertyGroup Condition="'$(StrideGraphicsApiDependent)' != 'true'">
    <!-- Force default runtime identifier -->
    <RuntimeIdentifier Condition="'$(RuntimeIdentifier)' != 'win' And '$(RuntimeIdentifier)' != 'linux' And '$(RuntimeIdentifier)' != 'osx'">$(StrideRuntimeIdentifier)</RuntimeIdentifier>
  </PropertyGroup>

  <!-- Those two targets are used to properly set the RuntimeIdentifier of ProjectReference (since we have sometimes weird transitions like win => win-d3d11 or win => noRID)
       If we don't do it, MSBuild slap current RID, and even if this RID is overriden inside the build of the project, it will still trigger an unecessary build w/ double writes -->  
  <Target Name="_StrideSdkGetDefaultRidForTfm" Returns="$(RuntimeIdentifier)">
    <PropertyGroup>
      <ExtrasBuildEachRuntimeIdentifier Condition="'$(ExtrasBuildEachRuntimeIdentifier)' == ''">false</ExtrasBuildEachRuntimeIdentifier>
    </PropertyGroup>
  </Target>
  <Target Name="_StrideProjectReferenceRuntimeIdentifier" BeforeTargets="PrepareProjectReferences">
    <!-- Query default RID of ProjectReference that are not RidAgnostic -->
    <MSBuild Projects="@(_MSBuildProjectReferenceExistent)"
             Condition="'%(_MSBuildProjectReferenceExistent.IsRidAgnostic)' == 'false'"
             BuildInParallel="$(BuildInParallel)"
             Properties="TargetFramework=%(_MSBuildProjectReferenceExistent.NearestTargetFramework)"
             Targets="_StrideSdkGetDefaultRidForTfm">
      <Output ItemName="_MSBuildProjectReferenceExistentWithRID" TaskParameter="TargetOutputs"  />
    </MSBuild>
    <ItemGroup>
      <_MSBuildProjectReferenceExistentWithRID2 Include="@(_MSBuildProjectReferenceExistentWithRID->'%(OriginalItemSpec)')">
        <RuntimeIdentifier>%(Identity)</RuntimeIdentifier>
        <SetTargetFramework>%(_MSBuildProjectReferenceExistentWithRID.SetTargetFramework);RuntimeIdentifier=%(Identity)</SetTargetFramework>
        <GlobalPropertiesToRemove>$([System.String]::Copy('%(_MSBuildProjectReferenceExistentWithRID.GlobalPropertiesToRemove)').Replace(';RuntimeIdentifier', ''))</GlobalPropertiesToRemove>
      </_MSBuildProjectReferenceExistentWithRID2>
      
      <_MSBuildProjectReferenceExistent Remove="@(_MSBuildProjectReferenceExistentWithRID2)"/>
      <_MSBuildProjectReferenceExistent Include="@(_MSBuildProjectReferenceExistentWithRID2)"/>
    </ItemGroup>
  </Target>

  <!-- Force a full Build & Pack if dependency was only built with a single TargetFramework (which would set IsInnerBuild and skip any Pack logic)
       This is only a problem when building from command line, Visual Studio builds each project completely.
       We use SkipPackOnInnerBuild to avoid infinite recursion. -->
  <Target Name="_StrideTriggerPackOnInnerBuild"
        BeforeTargets="CoreCompile"
        Condition="'$(BuildingInsideVisualStudio)' != 'true' And '$(GeneratePackageOnBuild)' == 'true' And '$(SkipPackOnInnerBuild)' != 'true'">
    <MSBuild Projects="@(_MSBuildProjectReferenceExistent)"
             Condition="'%(_MSBuildProjectReferenceExistent.SetTargetFramework)' != ''"
             BuildInParallel="$(BuildInParallel)"
             Properties="SkipPackOnInnerBuild=true"
             Targets="Build;Pack"
             RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove);TargetFramework;RuntimeIdentifier">
    </MSBuild>
  </Target>

  <Target Name="GetPackagingOutputs" Condition=" '$(StrideRuntime)' == 'true' And '$(StrideRuntimeNetStandard)' == 'true' " />

  <!-- Use default runtime as ref assembly -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);_StrideIncludeRefAssemblies</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>
  <Target Name="_StrideIncludeRefAssemblies" Condition="'$(RuntimeIdentifiers)' != '' And '$(RuntimeIdentifier)' == $(RuntimeIdentifiers.Split(';')[0])">
    <ItemGroup>
      <TfmSpecificPackageFile Include="@(IntermediateAssembly)" PackagePath="ref/$(TargetFramework)" />
      <TfmSpecificPackageFile Include="@(DocFileItem)" PackagePath="ref/$(TargetFramework)" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <GenerateProjectSpecificOutputFolder>false</GenerateProjectSpecificOutputFolder>

    <!-- Defines the language of the project being compiled CSharp or Cpp - defined by default to CSharp, must be overriden to Cpp in a Cpp project -->
    <StrideProjectType Condition="'$(StrideProjectType)' == ''">CSharp</StrideProjectType>

    <!-- Flag used per-project settings to specify that it should only be compiled on Windows Desktop-->
    <StrideWindowsOnly Condition="'$(StrideWindowsOnly)' == ''">false</StrideWindowsOnly>

    <!-- Default values -->
    <StridePlatformOriginal>$(StridePlatform)</StridePlatformOriginal>
    <StridePlatform Condition=" ($(TargetFramework.StartsWith('net4')) Or '$(TargetFramework)' == 'netstandard2.0') And ('$(RuntimeIdentifier)' == '' Or $(RuntimeIdentifier.StartsWith('win'))) ">Windows</StridePlatform>
    <StridePlatform Condition=" ($(TargetFramework.StartsWith('net4')) Or '$(TargetFramework)' == 'netstandard2.0') And $(RuntimeIdentifier.StartsWith('linux')) ">Linux</StridePlatform>
    <StridePlatform Condition=" ($(TargetFramework.StartsWith('net4')) Or '$(TargetFramework)' == 'netstandard2.0') And $(RuntimeIdentifier.StartsWith('osx')) ">macOS</StridePlatform>
    <StridePlatform Condition=" $(TargetFramework.StartsWith('uap10.0')) ">UWP</StridePlatform>
    <StridePlatform Condition=" '$(TargetFramework)' == 'monoandroid81' ">Android</StridePlatform>
    <StridePlatform Condition=" '$(TargetFramework)' == 'xamarinios10' ">iOS</StridePlatform>
    <!-- Default fallback -->
    <StridePlatform Condition=" '$(StridePlatform)' == '' ">Windows</StridePlatform>

    <StridePlatformFullName Condition="'$(StridePlatformFullName)' == ''">$(StridePlatform)</StridePlatformFullName>
    
    <StrideGlobalSettingsTargets Condition="'$(StrideGlobalSettingsTargets)' == ''">$(MSBuildThisFileDirectory)Stride.Core.GlobalSettings.targets</StrideGlobalSettingsTargets>
    <StridePostSettingsTargets Condition="'$(StridePostSettingsTargets)' == ''">$(MSBuildThisFileDirectory)Stride.Core.PostSettings.targets</StridePostSettingsTargets>
  </PropertyGroup>

  <!-- Ensure appropriate Solution Platform are available -->
  <Choose>
    <When  Condition=" '$(StridePlatform)' == 'Android' ">
      <PropertyGroup Condition=" '$(Platform)' == 'Android' "/>
    </When>
    <When  Condition=" '$(StridePlatform)' == 'iOS' ">
      <PropertyGroup Condition=" '$(Platform)' == 'iPhone' "/>
      <PropertyGroup Condition=" '$(Platform)' == 'iPhoneSimulator' "/>
    </When>
  </Choose>

  <!--Import Global Settings-->
  <Import Project="$(StrideGlobalSettingsTargets)"/>
</Project>
